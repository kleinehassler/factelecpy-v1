"""
Aplicaci√≥n Frontend para Sistema de Facturaci√≥n Electr√≥nica SRI Ecuador
Desarrollado con Streamlit - Versi√≥n Mejorada
"""
import streamlit as st
import requests
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, date, timedelta
import json
from typing import Dict, List, Optional
import base64
from io import BytesIO

# Importar m√≥dulos locales
from config import (
    FrontendConfig, apply_custom_css, get_status_badge, 
    show_message, init_session_state, clear_session_state,
    get_page_config, get_menu_options, get_api_base_url
)
from utils import (
    format_currency, format_date, create_metric_card,
    display_factura_table, create_sales_chart, create_pie_chart,
    DataValidator, create_export_options
)
from pages import FacturasPage, ClientesPage

# Configuraci√≥n de la p√°gina
st.set_page_config(**get_page_config())

# Aplicar CSS personalizado
apply_custom_css()

class APIClient:
    """Cliente mejorado para comunicaci√≥n con la API FastAPI"""
    
    def __init__(self, base_url: str):
        self.base_url = base_url
        self.token = None
        self.session = requests.Session()
    
    def login(self, username: str, password: str) -> bool:
        """Autenticar usuario"""
        try:
            response = self.session.post(
                f"{self.base_url}/auth/login",
                data={"username": username, "password": password},
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                self.token = data["access_token"]
                st.session_state.token = self.token
                st.session_state.authenticated = True
                st.session_state.user_data = data.get("user_data", {})
                return True
            return False
            
        except requests.exceptions.RequestException as e:
            show_message("connection_error", f"Error de conexi√≥n: {str(e)}")
            return False
        except Exception as e:
            show_message("error", f"Error inesperado: {str(e)}")
            return False
    
    def get_headers(self) -> Dict:
        """Obtener headers con token de autenticaci√≥n"""
        if not self.token and "token" in st.session_state:
            self.token = st.session_state.token
        
        return {
            "Authorization": f"Bearer {self.token}",
            "Content-Type": "application/json"
        }
    
    def get(self, endpoint: str, params: Dict = None) -> Optional[Dict]:
        """Realizar petici√≥n GET"""
        try:
            response = self.session.get(
                f"{self.base_url}{endpoint}",
                headers=self.get_headers(),
                params=params,
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()
            elif response.status_code == 401:
                self._handle_unauthorized()
                return None
            else:
                show_message("error", f"Error en petici√≥n: {response.status_code}")
                return None
                
        except requests.exceptions.RequestException as e:
            show_message("connection_error", f"Error de conexi√≥n: {str(e)}")
            return None
        except Exception as e:
            show_message("error", f"Error inesperado: {str(e)}")
            return None
    
    def post(self, endpoint: str, data: Dict) -> Optional[Dict]:
        """Realizar petici√≥n POST"""
        try:
            response = self.session.post(
                f"{self.base_url}{endpoint}",
                json=data,
                headers=self.get_headers(),
                timeout=30
            )
            
            if response.status_code in [200, 201]:
                return response.json()
            elif response.status_code == 401:
                self._handle_unauthorized()
                return None
            else:
                error_msg = response.text if response.text else f"Error {response.status_code}"
                show_message("error", f"Error en petici√≥n: {error_msg}")
                return None
                
        except requests.exceptions.RequestException as e:
            show_message("connection_error", f"Error de conexi√≥n: {str(e)}")
            return None
        except Exception as e:
            show_message("error", f"Error inesperado: {str(e)}")
            return None
    
    def _handle_unauthorized(self):
        """Manejar error de autorizaci√≥n"""
        show_message("error", "Sesi√≥n expirada. Por favor, inicie sesi√≥n nuevamente.")
        clear_session_state()
        st.rerun()

# Inicializar cliente API
@st.cache_resource
def get_api_client():
    return APIClient(get_api_base_url())

api_client = get_api_client()

def login_page():
    """P√°gina de login mejorada"""
    st.markdown('<h1 class="main-header">üßæ Sistema de Facturaci√≥n Electr√≥nica SRI Ecuador</h1>', 
                unsafe_allow_html=True)
    
    # Informaci√≥n del sistema
    with st.container():
        col1, col2, col3 = st.columns([1, 2, 1])
        
        with col2:
            st.markdown("""
            <div class="info-box">
                <h3>üè¢ Sistema Completo de Facturaci√≥n Electr√≥nica</h3>
                <ul>
                    <li>‚úÖ Cumple con normativa SRI v2.0.0</li>
                    <li>‚úÖ Firma digital XAdES-BES</li>
                    <li>‚úÖ Generaci√≥n autom√°tica de RIDE</li>
                    <li>‚úÖ Integraci√≥n con servicios web SRI</li>
                    <li>‚úÖ Env√≠o autom√°tico por email</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown("---")
            
            # Formulario de login
            st.subheader("üîê Iniciar Sesi√≥n")
            
            with st.form("login_form", clear_on_submit=False):
                username = st.text_input("üë§ Usuario", placeholder="Ingrese su usuario")
                password = st.text_input("üîí Contrase√±a", type="password", placeholder="Ingrese su contrase√±a")
                
                col1, col2, col3 = st.columns([1, 2, 1])
                with col2:
                    submit_button = st.form_submit_button("üöÄ Ingresar al Sistema", type="primary")
                
                if submit_button:
                    if username and password:
                        with st.spinner("Verificando credenciales..."):
                            if api_client.login(username, password):
                                show_message("login_success")
                                st.balloons()
                                st.rerun()
                            else:
                                show_message("login_error")
                    else:
                        show_message("error", "Por favor ingrese usuario y contrase√±a")
            
            # Informaci√≥n adicional
            with st.expander("‚ÑπÔ∏è Informaci√≥n del Sistema"):
                st.markdown("""
                **Versi√≥n:** 1.0.0  
                **Desarrollado para:** Empresas ecuatorianas  
                **Cumplimiento:** Normativa SRI Ecuador  
                **Soporte:** soporte@empresa.com  
                """)

def sidebar_navigation():
    """Navegaci√≥n lateral mejorada"""
    with st.sidebar:
        st.markdown("### üìä Men√∫ Principal")
        
        # Informaci√≥n del usuario
        if st.session_state.get("user_data"):
            user_data = st.session_state.user_data
            st.markdown(f"üë§ **{user_data.get('username', 'Usuario')}**")
            st.markdown(f"üè¢ **{user_data.get('empresa', 'Mi Empresa')}**")
            st.markdown("---")
        
        # Opciones de men√∫
        menu_options = get_menu_options()
        
        selected = None
        for option in menu_options:
            if st.button(f"{option['icon']} {option['label']}", key=option['key'], use_container_width=True):
                selected = option['key']
                break
        
        # Si no se seleccion√≥ nada, mantener la p√°gina actual
        if not selected:
            selected = st.session_state.get("current_page", "dashboard")
        else:
            st.session_state.current_page = selected
        
        # Manejar cerrar sesi√≥n
        if selected == "logout":
            clear_session_state()
            st.rerun()
        
        st.markdown("---")
        
        # Estado del sistema
        st.markdown("### üîß Estado del Sistema")
        
        # Verificar conexi√≥n con API
        try:
            health = api_client.get("/health")
            if health:
                st.success("üü¢ API Conectada")
            else:
                st.error("üî¥ API Desconectada")
        except:
            st.error("üî¥ Sin Conexi√≥n")
        
        # Informaci√≥n adicional
        st.markdown("---")
        st.markdown("### üìû Soporte")
        st.markdown("üìß soporte@empresa.com")
        st.markdown("üì± +593-2-1234567")
        
        return selected

def dashboard_page():
    """P√°gina principal del dashboard mejorada"""
    st.title("üìä Dashboard - Panel de Control")
    st.markdown("---")
    
    # Obtener estad√≠sticas
    with st.spinner("Cargando estad√≠sticas..."):
        stats = api_client.get("/dashboard/stats")
    
    if stats:
        # M√©tricas principales
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            delta_facturas = stats.get("delta_facturas", 0)
            delta_color = "normal" if delta_facturas >= 0 else "inverse"
            st.metric(
                label="üìÑ Facturas del Mes",
                value=stats.get("facturas_mes", 0),
                delta=delta_facturas,
                delta_color=delta_color
            )
        
        with col2:
            delta_ventas = stats.get("delta_ventas", 0)
            st.metric(
                label="üí∞ Ventas del Mes",
                value=format_currency(stats.get("ventas_mes", 0)),
                delta=format_currency(delta_ventas)
            )
        
        with col3:
            st.metric(
                label="üë• Clientes Activos",
                value=stats.get("clientes_activos", 0),
                delta=stats.get("delta_clientes", 0)
            )
        
        with col4:
            st.metric(
                label="üì¶ Productos",
                value=stats.get("productos_activos", 0)
            )
        
        st.markdown("---")
        
        # Gr√°ficos principales
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìà Evoluci√≥n de Ventas")
            ventas_data = api_client.get("/dashboard/ventas-mensuales")
            if ventas_data:
                create_sales_chart(ventas_data, "line")
            else:
                st.info("No hay datos de ventas disponibles")
        
        with col2:
            st.subheader("üßæ Facturas por Estado")
            estados_data = api_client.get("/dashboard/facturas-estado")
            if estados_data:
                create_pie_chart(estados_data, "cantidad", "estado", "Distribuci√≥n por Estado")
            else:
                st.info("No hay datos de estados disponibles")
        
        # Secci√≥n de facturas recientes
        st.markdown("---")
        st.subheader("üìã Facturas Recientes")
        
        facturas_recientes = api_client.get("/facturas?limit=10")
        if facturas_recientes:
            display_factura_table(facturas_recientes, show_actions=False)
        else:
            st.info("No hay facturas recientes")
        
        # Alertas y notificaciones
        st.markdown("---")
        st.subheader("üîî Alertas y Notificaciones")
        
        alertas = api_client.get("/dashboard/alertas")
        if alertas:
            for alerta in alertas:
                if alerta["tipo"] == "warning":
                    st.warning(f"‚ö†Ô∏è {alerta['mensaje']}")
                elif alerta["tipo"] == "error":
                    st.error(f"‚ùå {alerta['mensaje']}")
                else:
                    st.info(f"‚ÑπÔ∏è {alerta['mensaje']}")
        else:
            st.success("‚úÖ No hay alertas pendientes")
    
    else:
        st.error("‚ùå No se pudieron cargar las estad√≠sticas del dashboard")

def productos_page():
    """P√°gina de gesti√≥n de productos"""
    st.title("üì¶ Gesti√≥n de Productos")
    st.markdown("---")
    
    tab1, tab2, tab3 = st.tabs(["üìã Lista de Productos", "‚ûï Nuevo Producto", "üìä Estad√≠sticas"])
    
    with tab1:
        st.subheader("üìã Lista de Productos")
        
        # Filtros
        col1, col2, col3 = st.columns(3)
        
        with col1:
            search_term = st.text_input("üîç Buscar producto...", key="search_productos")
        
        with col2:
            tipo_filter = st.selectbox("Tipo", ["Todos", "BIEN", "SERVICIO"])
        
        with col3:
            activo_filter = st.selectbox("Estado", ["Todos", "Activo", "Inactivo"])
        
        # Obtener productos
        productos = api_client.get("/productos")
        
        if productos:
            df = pd.DataFrame(productos)
            
            # Aplicar filtros
            if search_term:
                mask = df['descripcion'].str.contains(search_term, case=False, na=False) | \
                       df['codigo_principal'].str.contains(search_term, case=False, na=False)
                df = df[mask]
            
            if tipo_filter != "Todos":
                df = df[df['tipo'] == tipo_filter]
            
            if activo_filter != "Todos":
                activo_bool = activo_filter == "Activo"
                df = df[df['activo'] == activo_bool]
            
            # Formatear datos
            df['precio_fmt'] = df['precio_unitario'].apply(format_currency)
            df['iva_fmt'] = df['porcentaje_iva'].apply(lambda x: f"{x*100:.1f}%")
            
            # Mostrar tabla
            columns_display = {
                'codigo_principal': 'C√≥digo',
                'descripcion': 'Descripci√≥n',
                'precio_fmt': 'Precio',
                'tipo': 'Tipo',
                'iva_fmt': 'IVA',
                'activo': 'Activo'
            }
            
            display_df = df.rename(columns=columns_display)[list(columns_display.values())]
            st.dataframe(display_df, use_container_width=True, hide_index=True)
            
            # Estad√≠sticas r√°pidas
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("Total Productos", len(df))
            with col2:
                bienes = len(df[df['tipo'] == 'BIEN'])
                st.metric("Bienes", bienes)
            with col3:
                servicios = len(df[df['tipo'] == 'SERVICIO'])
                st.metric("Servicios", servicios)
            with col4:
                activos = len(df[df['activo'] == True])
                st.metric("Activos", activos)
        
        else:
            st.info("No hay productos registrados")
    
    with tab2:
        st.subheader("‚ûï Nuevo Producto")
        
        with st.form("nuevo_producto_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                codigo_principal = st.text_input("C√≥digo Principal *")
                codigo_auxiliar = st.text_input("C√≥digo Auxiliar")
                descripcion = st.text_input("Descripci√≥n *")
                precio_unitario = st.number_input("Precio Unitario *", min_value=0.01, step=0.01)
            
            with col2:
                tipo = st.selectbox("Tipo *", ["BIEN", "SERVICIO"])
                codigo_impuesto = st.selectbox("C√≥digo Impuesto", ["2", "3", "5"], index=0)
                porcentaje_iva = st.number_input("Porcentaje IVA", value=0.12, step=0.01, format="%.4f")
                activo = st.checkbox("Activo", value=True)
            
            # Validaciones
            if codigo_principal and len(codigo_principal) > 25:
                st.error("‚ùå El c√≥digo principal no puede tener m√°s de 25 caracteres")
            
            if descripcion and len(descripcion) > 300:
                st.error("‚ùå La descripci√≥n no puede tener m√°s de 300 caracteres")
            
            # Bot√≥n guardar
            guardar_producto = st.form_submit_button("üíæ Guardar Producto", type="primary")
            
            if guardar_producto:
                if codigo_principal and descripcion and precio_unitario > 0:
                    producto_data = {
                        "codigo_principal": codigo_principal,
                        "codigo_auxiliar": codigo_auxiliar,
                        "descripcion": descripcion,
                        "precio_unitario": precio_unitario,
                        "tipo": tipo,
                        "codigo_impuesto": codigo_impuesto,
                        "porcentaje_iva": porcentaje_iva,
                        "activo": activo
                    }
                    
                    resultado = api_client.post("/productos", producto_data)
                    if resultado:
                        show_message("data_saved", f"Producto creado: {descripcion}")
                        st.rerun()
                else:
                    show_message("error", "Complete todos los campos obligatorios (*)")
    
    with tab3:
        st.subheader("üìä Estad√≠sticas de Productos")
        
        stats = api_client.get("/productos/estadisticas")
        if stats:
            # Distribuci√≥n por tipo
            if stats.get("tipos_distribucion"):
                create_pie_chart(
                    stats["tipos_distribucion"],
                    "cantidad",
                    "tipo",
                    "Distribuci√≥n por Tipo"
                )
            
            # Productos m√°s vendidos
            if stats.get("productos_mas_vendidos"):
                st.subheader("üèÜ Productos M√°s Vendidos")
                df_vendidos = pd.DataFrame(stats["productos_mas_vendidos"])
                st.dataframe(df_vendidos, use_container_width=True, hide_index=True)
        else:
            st.info("No hay estad√≠sticas disponibles")

def reportes_page():
    """P√°gina de reportes mejorada"""
    st.title("üìà Reportes y An√°lisis")
    st.markdown("---")
    
    tab1, tab2, tab3, tab4 = st.tabs(["üìä Ventas", "üßæ Facturaci√≥n", "üë• Clientes", "üì¶ Productos"])
    
    with tab1:
        st.subheader("üìä Reporte de Ventas")
        
        # Filtros de fecha
        col1, col2, col3 = st.columns(3)
        
        with col1:
            fecha_desde = st.date_input("üìÖ Desde", value=date.today() - timedelta(days=30))
        
        with col2:
            fecha_hasta = st.date_input("üìÖ Hasta", value=date.today())
        
        with col3:
            tipo_reporte = st.selectbox("Tipo de Reporte", ["Diario", "Semanal", "Mensual"])
        
        if st.button("üìä Generar Reporte de Ventas"):
            with st.spinner("Generando reporte..."):
                reporte = api_client.get(f"/reportes/ventas?desde={fecha_desde}&hasta={fecha_hasta}&tipo={tipo_reporte}")
                
                if reporte:
                    # Mostrar m√©tricas
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("Total Ventas", format_currency(reporte.get("total_ventas", 0)))
                    with col2:
                        st.metric("N√∫mero de Facturas", reporte.get("num_facturas", 0))
                    with col3:
                        st.metric("Promedio por Factura", format_currency(reporte.get("promedio", 0)))
                    
                    # Gr√°fico de evoluci√≥n
                    if reporte.get("datos_grafico"):
                        create_sales_chart(reporte["datos_grafico"], "bar")
                else:
                    st.info("No hay datos para el per√≠odo seleccionado")
    
    with tab2:
        st.subheader("üßæ Reporte de Facturaci√≥n")
        st.info("Funcionalidad en desarrollo")
    
    with tab3:
        st.subheader("üë• Reporte de Clientes")
        st.info("Funcionalidad en desarrollo")
    
    with tab4:
        st.subheader("üì¶ Reporte de Productos")
        st.info("Funcionalidad en desarrollo")

def configuracion_page():
    """P√°gina de configuraci√≥n mejorada"""
    st.title("‚öôÔ∏è Configuraci√≥n del Sistema")
    st.markdown("---")
    
    tab1, tab2, tab3, tab4 = st.tabs(["üè¢ Empresa", "üîê Certificados", "üìß Email", "üîß Sistema"])
    
    with tab1:
        st.subheader("üè¢ Configuraci√≥n de la Empresa")
        
        # Obtener configuraci√≥n actual
        config_empresa = api_client.get("/configuracion/empresa")
        
        with st.form("config_empresa_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                ruc = st.text_input("RUC *", value=config_empresa.get("ruc", "") if config_empresa else "")
                razon_social = st.text_input("Raz√≥n Social *", value=config_empresa.get("razon_social", "") if config_empresa else "")
                nombre_comercial = st.text_input("Nombre Comercial", value=config_empresa.get("nombre_comercial", "") if config_empresa else "")
                direccion = st.text_area("Direcci√≥n *", value=config_empresa.get("direccion", "") if config_empresa else "")
            
            with col2:
                telefono = st.text_input("Tel√©fono", value=config_empresa.get("telefono", "") if config_empresa else "")
                email = st.text_input("Email", value=config_empresa.get("email", "") if config_empresa else "")
                ambiente = st.selectbox("Ambiente SRI", ["1", "2"], index=0 if not config_empresa else int(config_empresa.get("ambiente", "1")) - 1)
                obligado_contabilidad = st.selectbox("Obligado Contabilidad", ["SI", "NO"], index=0 if not config_empresa else 0 if config_empresa.get("obligado_contabilidad") == "SI" else 1)
            
            # Validaciones
            if ruc and not DataValidator.validate_ruc(ruc):
                st.error("‚ùå RUC inv√°lido")
            
            if email and not DataValidator.validate_email(email):
                st.error("‚ùå Email inv√°lido")
            
            if st.form_submit_button("üíæ Guardar Configuraci√≥n", type="primary"):
                if ruc and razon_social and direccion:
                    empresa_data = {
                        "ruc": ruc,
                        "razon_social": razon_social,
                        "nombre_comercial": nombre_comercial,
                        "direccion": direccion,
                        "telefono": telefono,
                        "email": email,
                        "ambiente": ambiente,
                        "obligado_contabilidad": obligado_contabilidad
                    }
                    
                    resultado = api_client.post("/configuracion/empresa", empresa_data)
                    if resultado:
                        show_message("data_saved", "Configuraci√≥n de empresa guardada")
                else:
                    show_message("error", "Complete todos los campos obligatorios (*)")
    
    with tab2:
        st.subheader("üîê Certificados Digitales")
        
        # Subir certificado
        uploaded_file = st.file_uploader(
            "üìÅ Subir Certificado Digital (.p12)",
            type=['p12'],
            help="Seleccione su certificado digital en formato PKCS#12"
        )
        
        if uploaded_file:
            cert_password = st.text_input("üîí Contrase√±a del Certificado", type="password")
            
            if st.button("üíæ Guardar Certificado"):
                if cert_password:
                    # Aqu√≠ ir√≠a la l√≥gica para guardar el certificado
                    show_message("data_saved", "Certificado guardado exitosamente")
                else:
                    show_message("error", "Ingrese la contrase√±a del certificado")
        
        # Mostrar informaci√≥n del certificado actual
        cert_info = api_client.get("/configuracion/certificado")
        if cert_info:
            st.markdown("#### üìã Certificado Actual")
            col1, col2 = st.columns(2)
            
            with col1:
                st.info(f"**Titular:** {cert_info.get('titular', 'N/A')}")
                st.info(f"**Emisor:** {cert_info.get('emisor', 'N/A')}")
            
            with col2:
                st.info(f"**V√°lido desde:** {cert_info.get('valido_desde', 'N/A')}")
                st.info(f"**V√°lido hasta:** {cert_info.get('valido_hasta', 'N/A')}")
    
    with tab3:
        st.subheader("üìß Configuraci√≥n de Email")
        
        config_email = api_client.get("/configuracion/email")
        
        with st.form("config_email_form"):
            smtp_server = st.text_input("Servidor SMTP", value=config_email.get("smtp_server", "smtp.gmail.com") if config_email else "smtp.gmail.com")
            smtp_port = st.number_input("Puerto", value=config_email.get("smtp_port", 587) if config_email else 587)
            smtp_username = st.text_input("Usuario", value=config_email.get("smtp_username", "") if config_email else "")
            smtp_password = st.text_input("Contrase√±a", type="password")
            
            if st.form_submit_button("üíæ Guardar Configuraci√≥n Email"):
                email_data = {
                    "smtp_server": smtp_server,
                    "smtp_port": smtp_port,
                    "smtp_username": smtp_username,
                    "smtp_password": smtp_password
                }
                
                resultado = api_client.post("/configuracion/email", email_data)
                if resultado:
                    show_message("data_saved", "Configuraci√≥n de email guardada")
    
    with tab4:
        st.subheader("üîß Configuraci√≥n del Sistema")
        
        # Informaci√≥n del sistema
        system_info = api_client.get("/sistema/info")
        if system_info:
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("#### üìä Estado del Sistema")
                st.info(f"**Versi√≥n:** {system_info.get('version', 'N/A')}")
                st.info(f"**Base de Datos:** {'üü¢ Conectada' if system_info.get('db_status') else 'üî¥ Desconectada'}")
                st.info(f"**SRI:** {'üü¢ Disponible' if system_info.get('sri_status') else 'üî¥ No disponible'}")
            
            with col2:
                st.markdown("#### üîß Acciones de Mantenimiento")
                
                if st.button("üîÑ Reiniciar Servicios"):
                    show_message("processing", "Reiniciando servicios...")
                
                if st.button("üóëÔ∏è Limpiar Cache"):
                    show_message("success", "Cache limpiado exitosamente")
                
                if st.button("üìä Generar Reporte de Sistema"):
                    show_message("processing", "Generando reporte...")

def main():
    """Funci√≥n principal de la aplicaci√≥n mejorada"""
    # Inicializar estado de sesi√≥n
    init_session_state()
    
    # Verificar autenticaci√≥n
    if not st.session_state.authenticated:
        login_page()
        return
    
    # Navegaci√≥n principal
    selected_page = sidebar_navigation()
    
    # Mostrar p√°gina seleccionada
    try:
        if selected_page == "dashboard":
            dashboard_page()
        elif selected_page == "facturas":
            facturas_page = FacturasPage(api_client)
            facturas_page.render()
        elif selected_page == "clientes":
            clientes_page = ClientesPage(api_client)
            clientes_page.render()
        elif selected_page == "productos":
            productos_page()
        elif selected_page == "reportes":
            reportes_page()
        elif selected_page == "configuracion":
            configuracion_page()
        else:
            dashboard_page()  # P√°gina por defecto
    
    except Exception as e:
        st.error(f"‚ùå Error al cargar la p√°gina: {str(e)}")
        st.info("Por favor, recargue la p√°gina o contacte al soporte t√©cnico.")

if __name__ == "__main__":
    main()